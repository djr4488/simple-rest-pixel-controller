// Simple Rest Pixel Setter
// Tested using NodeMCU ESP8266 and WS2811 string lights
// Dependencies:
// * Restfully
// * Adafruit_NeoPixel
// * ESP8266
// hard code the node name of the device
const char* hostname = "hostname";

// if you dont use the Captive Portal for config you must define
// the SSID and Password of the network to connect to.
const char* ssid = "YOUR ROUTER";
const char* password = "YOUR ROUTER PASSWORD";

// actions, animations, and general light setup
const String fill = "fill";
const String pixel = "pixel";
const String multi = "multi";
const int numPixels = 50;

#ifdef ARDUINO_ARCH_ESP8266
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>

using WebServer = ESP8266WebServer;
#else
#include <WiFi.h>
#include <mDNS.h>
#include <WebServer.h>
#include <HTTPClient.h>
#endif

#include <Restfully.h>
#include <Adafruit_NeoPixel.h>

WebServer server(80);
RestRequestHandler restHandler;
Adafruit_NeoPixel strip = Adafruit_NeoPixel(numPixels, 4, NEO_RGB + NEO_KHZ800);
bool enableAnimation = false;
String animation = "NONE";

/*** Web Server
*/
void SendHeaders()
{
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
  server.sendHeader("Access-Control-Allow-Methods", "GET");
}

void handleRoot() {
  String html = "<html><head><title>Simple Rest Pixel Controller</title>";
  html += "</head>";
  html += "<body>";
  // header
  html += "<h1>Simple Rest Pixel Controller</h1>";
  // title area
  html += "<div class='title'><h2><label>Site</label> ";
  html += hostname;
  html += "</h2></div>";
  // ... add more here ...
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void handleNotFound() {
  String message = "Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  switch(server.method()) {
    case HTTP_ANY: message += "ANY"; break;
    case HTTP_GET: message += "GET"; break;
    case HTTP_POST: message += "POST"; break;
    case HTTP_PUT: message += "PUT"; break;
    case HTTP_PATCH: message += "PATCH"; break;
    case HTTP_DELETE: message += "DELETE"; break;
    case HTTP_OPTIONS: message += "OPTIONS"; break;
  }
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

/* Most browsers require a responst to OPTIONS requests or they will deny requests due to CORS policy.
 * We simply answer all requests with the appropriate Access-Control-* headers for testing.
*/
class OptionsRequestHandler : public RequestHandler
{
    virtual bool canHandle(HTTPMethod method, String uri) {
      return method == HTTP_OPTIONS;
    }
    virtual bool handle(WebServer& server, HTTPMethod requestMethod, String requestUri) {
      SendHeaders();
      server.send(200, "application/json; charset=utf-8", "");
      return true;
    }
} optionsRequestHandler;

int handleEcho(RestRequest& request) {
  String s("Hello ");

  // if we have a json body, perhaps we have a greeting parameter
  if(request.hasJson) {
    auto root = request.body.as<JsonObject>();  // expect request is a Json object not array
    String greeting = root["greeting"];  // NULL if this argument doesnt exist
    if(greeting) {
      s = greeting; // default to Hello if greeting argument wasnt supplied
      s += ' ';
    }
  }
  
  // add the greeting name
  auto msg = request["msg"];
  if(msg.isString())
    s += msg.toString();
  else {
    s += '#';
    s += (long)msg;
  }
  request.response["reply"] = s;
  return 200;
}

/*
 ESP8266 Hello World urlencode by Steve Nelson
 URLEncoding is used all the time with internet urls. This is how urls handle funny characters
 in a URL. For example a space is: %20
 These functions simplify the process of encoding and decoding the urlencoded format.
  
 It has been tested on an esp12e (NodeMCU development board)
 This example code is in the public domain, use it however you want. 
  Prerequisite Examples:
  https://github.com/zenmanenergy/ESP8266-Arduino-Examples/tree/master/helloworld_serial
*/
String urldecode(String str)
{
    
    String encodedString="";
    char c;
    char code0;
    char code1;
    for (int i =0; i < str.length(); i++){
        c=str.charAt(i);
      if (c == '+'){
        encodedString+=' ';  
      }else if (c == '%') {
        i++;
        code0=str.charAt(i);
        i++;
        code1=str.charAt(i);
        c = (h2int(code0) << 4) | h2int(code1);
        encodedString+=c;
      } else{
        
        encodedString+=c;  
      }
      
      yield();
    }
    
   return encodedString;
}

String urlencode(String str)
{
    String encodedString="";
    char c;
    char code0;
    char code1;
    char code2;
    for (int i =0; i < str.length(); i++){
      c=str.charAt(i);
      if (c == ' '){
        encodedString+= '+';
      } else if (isalnum(c)){
        encodedString+=c;
      } else{
        code1=(c & 0xf)+'0';
        if ((c & 0xf) >9){
            code1=(c & 0xf) - 10 + 'A';
        }
        c=(c>>4)&0xf;
        code0=c+'0';
        if (c > 9){
            code0=c - 10 + 'A';
        }
        code2='\0';
        encodedString+='%';
        encodedString+=code0;
        encodedString+=code1;
        //encodedString+=code2;
      }
      yield();
    }
    return encodedString;
    
}

unsigned char h2int(char c)
{
    if (c >= '0' && c <='9'){
        return((unsigned char)c - '0');
    }
    if (c >= 'a' && c <='f'){
        return((unsigned char)c - 'a' + 10);
    }
    if (c >= 'A' && c <='F'){
        return((unsigned char)c - 'A' + 10);
    }
    return(0);
}

DynamicJsonDocument getJsonDocFromRequest(RestRequest& request) {
  String encoded = request["json"];
  Serial.print("encoded: ");
  Serial.println(encoded);
  String json = urldecode(request["json"]);
  Serial.print("json: ");
  Serial.println(json);
  DynamicJsonDocument doc(2048);
  deserializeJson(doc, json);
  return doc;
}

void fillWithColor(uint32_t color) {
  strip.fill(strip.gamma32(color), 0, 50);
  strip.show();
}

void setPixelColor(int pixelNum, uint32_t color) {
  strip.setPixelColor(pixelNum, color);
  strip.show();
}

int handleLightRequest(RestRequest& request) {
  //if (request.hasJson) {
  DynamicJsonDocument doc = getJsonDocFromRequest(request); 
  String act = doc["action"];
  Serial.println(act);
  if (fill.equals(act)) {
    uint32_t color = doc["colors"][0];
    Serial.println(color);
    fillWithColor(color);
    return 200;
  } else if (pixel.equals(act)) {
    uint32_t color = doc["colors"][0];
    int pixelNum = doc["pixnum"];
    setPixelColor(pixelNum, color);
    return 200;
  } else if (multi.equals(act)) {
    JsonArray colors = doc["colors"].as<JsonArray>();
    int colorIdx = 0;
    int colorsSize = colors.size();
    Serial.print("Color count:");
    Serial.println(colorsSize);
    for (int pixelIdx=0; pixelIdx<numPixels; pixelIdx++) {
      if (colorIdx >= colorsSize) {
        colorIdx = 0; 
      }
      JsonVariant vColor = colors[colorIdx];
      strip.setPixelColor(pixelIdx, vColor.as<uint32_t>());
      colorIdx++;
    }
    strip.show();
  } else {
    request.response["errorMsg"] = "Unrecogized request";
    return 400;
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("SimpleRestServer");

  //setup neo pixel 
  strip.begin();
  strip.setBrightness(127);
  strip.show();

  // have the server collect the content-type header for us
  const char * headerkeys[] = {"Content-Type"} ;
  size_t headerkeyssize = sizeof(headerkeys)/sizeof(char*);
  server.collectHeaders( headerkeys, headerkeyssize );
  server.on("/", handleRoot);
  server.addHandler(&optionsRequestHandler);
  server.addHandler(&restHandler);
  server.onNotFound(handleNotFound);
  restHandler.on("/api/echo/:msg(string|integer)")
    .GET(handleEcho)
    .POST(handleEcho);
  restHandler.on("/api/light/:json")
    .GET(handleLightRequest)
    .POST(handleLightRequest);
  //restHandler.on("/api/fill/set/:red(integer)/:green(integer)/:blue(integer)")
  //  .GET(handleFillColorByRGB)
  //  .POST(handleFillColorByRGB);  
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection failed!  Rebooting...");
    delay(5000);
    ESP.restart();
  }
 
  server.begin(80);
  Serial.print("Host: ");
  Serial.print(hostname);
  Serial.print("   IP: ");
  Serial.println(WiFi.localIP());
}

void loop() {

  server.handleClient();

  // no further processing if we are not in station mode
  if(WiFi.getMode() != WIFI_STA)
    return;
}
